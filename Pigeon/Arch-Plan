mgv> I propose the following architecture:
<rmad> ok
<mgv> 1. MainFrame, the main JFrame of the program. lets the user see the contents of his folders and add/remove accounts
<rmad> ok
<mgv> 2. ComposeFrame, a JFrame that lets the user compose an email and send it
<rmad> 3?
<mgv> 3. Email, a POJO that describes an email message
<rmad> whats POJO?
<mgv> a class that does not extend anything nor implement any interface
<mgv> similar to a struct in C
<rmad> ok
<mgv> 4. EmailReceiver, an interface with methods for connecting to a server and getting a list of Emails
<rmad> i'll make this interface? :O
<mgv> 4a. MboxEmailReceiver, an implementation of EmailReceiver that reads emails from a mbox file
<mgv> 4b. MaildirEmailReceiver , an implementation of EmailReceiver that reads emails from a Maildir directory
<mgv> I'm listing the possible implementatons of EmailReceiver. you don't need to write all of them
<mgv> one is enouh for a start
<mgv> enough
<mgv> 4c. POPEmailReceiver, an implementation of EmailReceiver that reads email from a POP3 server
<mgv> 4d. IMAPEmailReceiver, an implementation of EmaiLReceiver that reads email from an IMAP server
<mgv> those would be the main implementations of EmailReceiver
<rmad> ok
<rmad> what is the use of 4a and 4b?
<mgv> for reading mboxes and maildirs
<mgv> they're not much different from 4c and 4d
<rmad> ok
<mgv> 5. EmailSender, an interface with a method for sending an Email to an email address
<mgv> 6. SendmailEmailSender, an implementation of EmailSender that sends the email through the sendmail program
<rmad> ok
<mgv> that was supposed to be 5a
<rmad> ok i got that
<mgv> 5b. SMTPEmailSender, an implementation of EmailSender that sends the email through a SMTP server
<mgv> that's enough for emailsender
<mgv> you'll probably also need 6. Account, A Serializable class for storing an account
<rmad> ok
<mgv> and that's probably enough for a start
<mgv> you should not feel constrained by this architecture â€” it is only a suggestion. you are free to implement the client any way you want to
<rmad> so 1,2,3,4,5,6 will all be in different classes i guess. right?
<mgv> yes, I've even provided the classn namesd
<mgv> class names
<mgv> i.e. MainFrame, ComposeFrame, ...
<rmad> ok. got it.
<mgv> you don't even need to use external libraries for the first version
<rmad> Shall i make all classes in one file or in different files?
<mgv> the rule is one top-level class per file
<mgv> do not break it
<rmad> ok. that is a convention?
<mgv> you can only have multiple classes in a file if they are nested
<mgv> yes
<mgv> and also a requirement for public classes
<mgv> i.e. if you declare public class Thing you cannot have any other publc class in that file
<rmad> ok. and the main method will be in another class?
<mgv> the main method will e in MainFrame
<mgv> and it will instantiate MainFrame and make it visible
<rmad> ok. This program is gonna be lot of code. right? 
<mgv> the first version shouldn't be that much
<mgv> I suggest writing a DummyEmailReceiver and DummyEmaiLSender for the first version instead of the other implementations above
<mgv> the DummyEmailReceiver will return  two sample emails when asked to get emails
<rmad> what is that? I mean DummyEmailReceiver
<mgv> and the DummyEmailSender will print a message to stderr when asked to send emails
<rmad> so there won't be any actual sending or receiving
<mgv> they're for testing
<mgv> yes
<mgv> the first part of development will be to make a functional user interface and workflow, therefore you don't need more than DummyEmailReceiver and DummyEmailSender for that
<mgv> after you get this working, you can start implementing the real senders and receivers
<rmad> i can just print a predefined string for the messages in DummyEmailReceiver and DummyEmailSender?
<mgv> print a string to stdout in the sender, and return a test email in the receiver
<mgv> you want to test whether the user interface can display emails, so you should return one mail in the receiver
<mgv> the interfaces will look something like the following:
<mgv> interface EmailSender{
<mgv>     public void sendEmail(final Email email);
<mgv> }
<mgv> and
<mgv> interface EmailReceiver{
<rmad> ok
<mgv>     public Email[] receiveEmails();
<mgv> }
<rmad> this looks a little complicated. I'll tread step by step.
<mgv> ok
<mgv> the first version won't need to handle attachments
<mgv> you can represent emails as a Map<String, String> of headers and a String body
<rmad> So it will be totally string?
<mgv> yes, you won't handle attachments in the first version
<rmad> ok. thats good
<mgv> i.e. store the mail body as a string
<mgv> and just display the mail body with textArea.setText(email.body);
<rmad> mails with pictures. Are they made in string too?
<mgv> you will  ignore attachments completely
<mgv> for the first version
<mgv> the first version will only use DummyEmailWhatever
<rmad> ok
<mgv> so you won't have to handle pictures
<mgv> when you write the other senders/receivers, you will have to use a MIME library and represent emails as proper mime documents
<rmad> ok
<rmad> does MIME handle pictures, videos etc?
<mgv> yes


like https://commons.apache.org/proper/commons-email/